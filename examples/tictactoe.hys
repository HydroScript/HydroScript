// requires node.js

// This example makes a tictactoe game played from the console

// defining prompt function
prompt = >- query {
    // import readline
    readline = require("readline")

    // readline interface
    rl = readline.createInterface({
        input   process.stdin
        output  process.stdout
    })

    // returning promise
    <- @@Promise(>- resolve rl.question(query >- ans {
        rl.close()
        resolve(ans)
    }))
}

// functions and initial values
board = [
    null null null
    null null null
    null null null
]
parseInput = >- str {
    str.length != 2 ? <- null
    items = str.split("")

    row = parseInt(items[0])
    column = items[1]
    row != 1 && row != 2 && row != 3 ? <- null
    column != "a" && column != "b" && column != "c" ? <- null
    col_num = (column == "a" ? 1 : column == "b" ? 2 : 3)
    
    board[row * 3 + col_num - 4] ? <- null

    <- {
        row     row
        column  col_num
    }
}
randInput = >- {
    row = [ "1" "2" "3" ]
    col = [ "a" "b" "c" ]
    <- row[Math.round(Math.random() * 3.99999 - 0.5)] + col[Math.round(Math.random() * 3.99999 - 0.5)]
}
personWon = >- from {
    i <~~ 0..2 -? (
        from[i * 3] == from[i * 3 + 1] &&
        from[i * 3 + 1] == from[i * 3 + 2] &&
        from[i * 3] != null
    ) ? <- from[i * 3]
    j <~~ 0..2 -? (
        from[j] == from[3 + j] &&
        from[3 + j] == from[6 + j] &&
        from[j] != null
    ) ? <- from[j]
    from[0] == from[4] &&
    from[4] == from[8] &&
    from[0] != null ? <- from[0]
    from[2] == from[4] &&
    from[4] == from[6] &&
    from[2] != null ? <- from[2]
    <- null
}

// main game
game = >>- {
    !personWon() -? {
        console.log(
            (board[0] ?? "_") + " " + (board[1] ?? "_") + " " + (board[2] ?? "_") + "\n" +
            (board[3] ?? "_") + " " + (board[4] ?? "_") + " " + (board[5] ?? "_") + "\n" +
            (board[6] ?? "_") + " " + (board[7] ?? "_") + " " + (board[8] ?? "_")
        )

        move = null
        !move -? move = parseInput(-> prompt("Enter a valid move: "))
        console.log("Your input was row" move.row "column" move.column)
        
        board[move.row * 3 + move.column - 4] = "X"

        ai_move = null
        !ai_move -? ai_move = parseInput(randInput())

        board[ai_move.row * 3 + ai_move.column - 4] = "O"
    }
    <- personWon() + " won!"
}
game().then(>- str console.log(str))